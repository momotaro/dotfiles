[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'kristijanhusak/vim-hybrid-material'
hook_add = '''
  set background=dark
  colorscheme hybrid_material

  let g:enable_bold_font=1
'''

[[plugins]]
repo = 'embear/vim-localvimrc'
hook_add = '''
  let g:localvimrc_persistent=2
'''

[[plugins]]
repo = 'tpope/vim-obsession'
hook_add = '''
  nnoremap ,S :<C-u>mksession!<CR><ESC>
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'jlanzarotta/bufexplorer' 
hook_add = '''
  nmap ,be \be
  nmap ,bv \bv
  nmap ,bs \bs
'''

# [[plugins]]
# repo = 'Shougo/vimfiler.vim'
# depends = 'unite.vim'
# hook_add = '''
  # nnoremap ,fe :VimFilerExplore -split -winwidth=35 -find -no-quit -no-focus<CR>
# '''

#---------------------------------------------------
# Code completion
#---------------------------------------------------

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertCharPre'
on_ft = 'snippet'
depends = 'context_filetype.vim'
hook_add = '''
  let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
  let g:neosnippet#enable_snipmate_compatibility = 1

  inoremap <expr> <CR> 
    \ pumvisible() ? <Plug>(neosnippet_expand_or_jump) : "\<CR>"
  snoremap <expr> <CR>
    \ pumvisible() ? <Plug>(neosnippet_expand_or_jump) : "\<CR>"
  xnoremap <expr> <CR>
    \ pumvisible() ? <Plug>(neosnippet_expand_or_jump) : "\<CR>"

  imap <expr> <TAB>
    \ pumvisible() ? "\<CR>" :
    \ neosnippet#expandable_or_jumpable() ?
    \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  smap <expr> <TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endi
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_i = 1
# hook_add = """
  # let g:deoplete#enable_at_startup = 1
  # let g:deoplete#auto_complete_delay = 0
  # let g:deoplete#auto_complete_start_length = 1
  # let g:deoplete#enable_camel_case = 0
  # let g:deoplete#enable_ignore_case = 0
  # let g:deoplete#enable_refresh_always = 0
  # let g:deoplete#enable_smart_case = 1
  # let g:deoplete#file#enable_buffer_path = 1
  # let g:deoplete#max_list = 10000
# """

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
build = './install.sh nightly'
hook_add = """
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  " Remap for rename current word
  nmap <silent> ,re <Plug>(coc-rename)

  autocmd CursorHold * silent call CocActionAsync('highlight')
  " Use K for show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
"""

[[plugins]]
repo = 'junegunn/fzf'

#---------------------------------------------------
# Lintter
#---------------------------------------------------
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_lint_on_enter = 1
  let g:ale_fix_on_save = 1
  let g:ale_lint_on_text_changed = 'never'

  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  nmap <silent> <c-j> <Plug>(ale_next_wrap)
  nmap <silent> <c-k> <Plug>(ale_previous_wrap)

  let g:ale_fixers = {}
'''

#---------------------------------------------------
# Project & File manager
#---------------------------------------------------
[[plugins]]
repo = 'scrooloose/nerdtree'
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
  let g:NERDTreeWinSize = 30
  let g:nerdtree_tabs_open_on_console_startup = 0
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  nnoremap ,ex :NERDTreeFocusToggle<CR>

  let g:NERDTreeExactMatchHighlightColor = {}
  let g:NERDTreeExactMatchHighlightColor['.gitignore'] = 'F54D27'
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = """
  let s:menus = {}
  let s:menus.file = {'description': 'File search (buffer, file, file_rec, file_mru'}
  let s:menus.line = {'description': 'Line search (change, grep, line, tag'}
  let s:menus.others = {'description': 'Others (command, command_history, help)'}
  let s:menus.file.command_candidates = [
        \ ['buffer', 'Denite buffer'],
        \ ['file: Files in the current directory', 'Denite file'],
        \ ['file_rec: Files, recursive list under the current directory', 'Denite file_rec'],
        \ ['file_mru: Most recently used files', 'Denite file_mru']
        \ ]
  let s:menus.line.command_candidates = [
        \ ['change', 'Denite change'],
        \ ['grep :grep', 'Denite grep'],
        \ ['line', 'Denite line'],
        \ ['tag', 'Denite tag']
        \ ]
  let s:menus.others.command_candidates = [
        \ ['command', 'Denite command'],
        \ ['command_history', 'Denite command_history'],
        \ ['help', 'Denite help']
        \ ]

  " call denite#custom#var('menu', 'menus', s:menus)

  nnoremap [denite] <Nop>
  nmap ,, [denite]
  nnoremap <silent> [denite]b :Denite buffer<CR>
  nnoremap <silent> [denite]c :Denite changes<CR>
  nnoremap <silent> [denite]f :Denite file<CR>
  nnoremap <silent> [denite]g :Denite grep<CR>
  nnoremap <silent> [denite]h :Denite help<CR>
  nnoremap <silent> [denite]l :Denite line<CR>
  nnoremap <silent> [denite]t :Denite tag<CR>
  nnoremap <silent> [denite]m :Denite file_mru<CR>
  nnoremap <silent> [denite]u :Denite menu<CR>

  call denite#custom#map(
        \ 'insert',
        \ '<Down>',
        \ '<denite:move_to_next_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<Up>',
        \ '<denite:move_to_previous_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<C-N>',
        \ '<denite:move_to_next_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<C-P>',
        \ '<denite:move_to_previous_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<C-G>',
        \ '<denite:assign_next_txt>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<C-T>',
        \ '<denite:assign_previous_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'normal',
        \ '/',
        \ '<denite:enter_mode:insert>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<Esc>',
        \ '<denite:enter_mode:normal>',
        \ 'noremap'
        \)

  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs', [
              \ '.git/', 'build/', '.gradle/', 'node_modules/', '__pycache__/',
              \ 'images/', '*.o', '*.make', '*.min.*',
              \ 'img/', 'fonts/', '*~', '*.exe', '*.bak',
              \ '.DS_Store', '*.pyc', '*.class', 'tags', '*.lock',
              \ '*.log', 'logs/*'
              \ ])

  " grep
  "------------------------
  function! g:GetVisualWord() abort
    let word = getline("'<")[getpos("'<")[2] - 1:getpos("'>")[2] - 1]
    return word
  endfunction

	function! g:GetVisualWordEscape() abort
    let word = substitute(GetVisualWord(), '\\', '\\\\', 'g')
    let word = substitute(word, '[.?*+^$|()[\]]', '\\\0', 'g')
    return word
	endfunction

  xnoremap <silent> ,fg :Denite grep:::`GetVisualWordEscape()`<CR>
"""

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2
  let g:lightline = {
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'gitgutter', 'readonly' , 'dir', 'filename']]
    \ },
    \ 'inactive': {
    \       'left': [['dir'], ['filename'], ['filetype', 'readonly', 'modified']]
    \ },
    \ 'tabline': {
    \       'right': [['rows'], ['cd'], ['tabopts']]
    \ },
    \ 'tab': {
    \       'active': ['prefix', 'filename']
    \ },
    \ 'component_function': {
    \   'fugitive': 'MyFugitive',
    \   'gitgutter' : 'MyGitGutter',
    \   'readonly': 'MyReadonly',
    \   'filename': 'MyFilename',
    \   'modified': 'MyModified',
    \   'mode': 'LightlineMode'
    \ },
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \ }

  let g:lightline.component = {}
  let g:lightline.component.dir = '%.35(%{expand("%:h:s?\\S$?\\0?")}%)'

  function! MyModified()
      if &filetype == "help"
          return ""
      elseif &modified
          return "+"
      elseif &modifiable
          return ""
      else
          return ""
      endif
  endfunction

  function! MyReadonly()
      if &filetype == "help"
          return ""
      elseif &readonly
          return "\ue0a2"
      else
          return ""
      endif
  endfunction

  function! MyFugitive()
      if exists("*fugitive#head")
          let _ = fugitive#head()
          return strlen(_) ? "\ue0a0 "._ : ''
      endif
      return ''
  endfunction

  function! MyGitGutter()
      if ! exists('*GitGutterGetHunkSummary')
                  \ || ! get(g:, 'gitgutter_enabled', 0)
                  \ || winwidth('.') <= 90
          return ''
      endif
      let symbols = [
                  \ g:gitgutter_sign_added . ' ',
                  \ g:gitgutter_sign_modified . ' ',
                  \ g:gitgutter_sign_removed . ' '
                  \ ]
      let hunks = GitGutterGetHunkSummary()
      let ret = []
      for i in [0, 1, 2]
          if hunks[i] > 0
              call add(ret, symbols[i] . hunks[i])
          endif
      endfor
      return join(ret, ' ')
  endfunction

  function! LightlineMode()
    let fname = expand('%:t')
    return fname == 'ControlP' ? 'CtrlP' :
          \ fname =~ 'NERD_tree' ? 'NERDTree' :
          \ &ft == 'unite' ? 'Unite' :
          \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction
'''

# Git
#------------------------------
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <Space>gd :<C-u>Gdiff<CR>
  nnoremap <Space>gs :<C-u>Gstatus<CR><C-w>15+
  nnoremap <Space>gl :<C-u>Glog<CR>
  nnoremap <Space>ga :<C-u>Gwrite<CR>
  nnoremap <Space>gc :<C-u>Gcommit<CR>
  nnoremap <Space>gC :<C-u>Git commit --amend<CR>
  nnoremap <Space>gb :<C-u>Gblame<CR>
'''
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
  nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
  nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>
'''

# Utils
#------------------------------
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  " 全体置換
  nnoremap <silent> <Space>r :OverCommandLine<CR>%s//g<Left><Left>
  " 選択範囲置換
  vnoremap <silent> <Space>r :OverCommandLine<CR>s//g<Left><Left>
  " カーソルしたの単語置換
  nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
'''

[[plugins]]
repo = 'vim-scripts/copypath.vim'
hook_add = '''
  nnoremap <silent> ,cp :CopyPath<CR>
  nnoremap <silent> ,cf :CopyFileName<CR>
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
hook_add = """
  hi IndentGuidesOdd  ctermbg = black
  hi IndentGuidesEven ctermbg = darkgrey
"""
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-function'
[[plugins]]
repo = 'kana/vim-operator-user'
[[plugins]]
repo = 'osyo-manga/vim-operator-search'
depends = ['vim-operator-user', 'vim-textobj-function', 'vim-textobj-user']
hook_add = '''
nmap <Space>/ <Plug>(operator-search)if
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDCreateDefaultMappings = 0
  let NERDSpaceDelims = 1

  nmap ,c<Space> <Plug>NERDCommenterToggle
  vmap ,c<Space> <Plug>NERDCommenterToggle
  vmap ,cs <Plug>NERDCommenterSexy
'''
[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'
[[plugins]]
repo = 'vim-scripts/YankRing.vim'
[[plugins]]
repo = 'vim-scripts/renamer.vim'
[[plugins]]
repo = 'vim-scripts/grep.vim'
[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'tpope/vim-repeat'
[[plugins]]
repo = 'jiangmiao/auto-pairs'
[[plugins]]
repo = 'h1mesuke/vim-alignta'
hook_add = '''
  xnoremap al :Alignta<Space>
'''
[[plugins]]
repo = 'kana/vim-fakeclip'
hook_add = '''
  nmap <silent> cyy <Home><Plug>(fakeclip-y)<End><ESC>
  nmap <silent> cp "*p
  vnoremap <silent> ,cy "*y
'''
[[plugins]]
repo = 'kana/vim-smartchr'
hook_add = '''
  augroup MySmartchr
    autocmd!
    inoremap <buffer><expr> ? smartchr#one_of('?', ' ? ')
    inoremap <buffer><expr> : smartchr#one_of(':', '::', ' : ')

    autocmd FileType go inoremap <buffer><expr> : smartchr#one_of(':', ' := ', ' : ')

    " 演算子の間に空白を入れる
    autocmd FileType * inoremap <buffer><expr> < search('^#include\%#', 'bcn')? ' <': smartchr#one_of('<', ' << ', ' < ', '<<<')
    autocmd FileType * inoremap <buffer><expr> + smartchr#one_of(' + ', '++', '+')
    autocmd FileType * inoremap <buffer><expr> - smartchr#one_of('-', '--', ' - ')
    autocmd FileType * inoremap <buffer><expr> % smartchr#one_of(' % ', '%')
    autocmd FileType * inoremap <buffer><expr> * smartchr#one_of(' * ', '*')
    autocmd FileType * inoremap <buffer><expr> & smartchr#one_of('&', ' && ', ' & ')
    autocmd FileType * inoremap <buffer><expr> <Bar> smartchr#one_of('<Bar>', ' <Bar><Bar> ', ' <Bar> ')
    autocmd FileType * inoremap <buffer><expr> , smartchr#one_of(', ',',')

    " =の場合、単純な代入や比較演算子として入力する場合は前後にスペースをいれる。
    " 複合演算代入としての入力の場合は、直前のスペースを削除して=を入力
    autocmd FileType * inoremap <buffer><expr> =
      \ search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= ' :
      \ search('\(*\<bar>!\)\%#', 'bcn')? '= ' : smartchr#one_of(' = ', ' == ', '=')

    " 下記の文字は連続して現れることがまれなので、二回続けて入力したら改行する
    autocmd FileType * inoremap <buffer><expr> ; smartchr#one_of(';', ';<cr>')
    autocmd FileType * inoremap <buffer><expr> (<CR> smartchr#one_of('()<Left><cr><cr><Up><Tab>')

    " if文直後の(は自動で間に空白を入れる
    "inoremap <buffer><expr> ( search('\<\if\%#', 'bcn')? ' (  )': '('

    " アロー系演算子
    autocmd FileType * inoremap <buffer><expr> =~ smartchr#one_of(' =~ ')
    autocmd FileType * inoremap <buffer><expr> => smartchr#one_of(' => ')
    autocmd FileType * inoremap <buffer><expr> . smartchr#loop('.', '=>', '..', '...')

    " ruby
    autocmd FileType ruby inoremap <buffer><expr> =
      \ search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
      \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
      \ : smartchr#one_of(' = ', ' == ', '=')

    " haml
    autocmd FileType haml inoremap <buffer><expr> = search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
                    \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
                    \ : smartchr#one_of('=', ' = ', ' == ')
    autocmd FileType haml inoremap <buffer><expr> => smartchr#one_of(' => ')
    autocmd FileType haml inoremap <buffer><expr> % smartchr#one_of('%', ' % ')

    " Reset
    "--------------------------------------------
    autocmd FileType eruby inoremap <buffer><expr> = ('=')
    autocmd FileType html inoremap <buffer><expr> = ('=')
    autocmd FileType slim inoremap <buffer><expr> = ('=')
    autocmd FileType html.twig inoremap <buffer><expr> = ('=')
    autocmd FileType javascript,css inoremap <buffer><expr> * ('*')
  augroup END
'''

#---------------------------------------------------
# Utils
#---------------------------------------------------

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = """
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 1
  let g:indent_guides_guide_size = 1
"""

[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
  nmap j <Plug>(accelerated_jk_gj)
  nmap k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html','xml','eruby','html.twig','riot']
hook_add = """
  let g:closetag_filenames = "*.html,*.xml,*.erb,*.tag"
"""

# Quickfix
[[plugins]]
repo = 'jceb/vim-hier'
